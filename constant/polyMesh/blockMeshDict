/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  2.0.0                                 |
|   \\  /    A nd           | Web:      www.OpenFOAM.com                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    object      blockMeshDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

convertToMeters 1;

vertices 
( 
    (-2   0   0) 
    (8    0   0) 
    (8.2  0   0) 
    (10   0   0) 
    (-2   1.6 0) 
    (8    1.6 0) 
    (8.2  1.6 0) 
    (10   1.6 0) 
    (-2   3   0) 
    (8    3   0) 
    (8.2  3   0) 
    (10   3   0) 
    (-2   0   0.1) 
    (8    0   0.1) 
    (8.2  0   0.1) 
    (10   0   0.1) 
    (-2   1.6 0.1) 
    (8    1.6 0.1) 
    (8.2  1.6 0.1) 
    (10   1.6 0.1) 
    (-2   3   0.1) 
    (8    3   0.1) 
    (8.2  3   0.1) 
    (10   3   0.1) 
); 
 
blocks 
( 
    hex (0 1 5 4 12 13 17 16)   (200 32 1) simpleGrading (1 1 1) // 0: bottom left
    hex (2 3 7 6 14 15 19 18)   (36  32 1) simpleGrading (1 1 1) // 1: bottom right
    hex (4 5 9 8 16 17 21 20)   (200 28 1) simpleGrading (1 1 1) // 2: top left
    hex (5 6 10 9 17 18 22 21)  (4   28 1) simpleGrading (1 1 1) // 3: narrow above wall
    hex (6 7 11 10 18 19 23 22) (36  28 1) simpleGrading (1 1 1) // 4: top right
); 

edges
( 
); 
 
boundary
(
    stationaryWalls
    {
        type wall;
        faces
        (
            (0 12 16 4) // left
            (4 16 20 8) 
            (7 19 15 3) // right
            (11 23 19 7) 
            (0 1 13 12)  // lower
            (5 6 18 17) 
            (2 14 18 6) 
            (2 3 15 14) 
        );
    }
    victimWall
    {
        type wall;
        faces
        (
            (1 5 17 13) // wall that gets hit 
        )
    }
    frontBack
    {
        type symmetryPlane;
        faces
        (
            (0 4 5 1) // back
            (4 8 9 5)
            (5 9 10 6)
            (6 10 11 7)
            (2 6 7 3)
            (12 13 17 16) // front
            (16 17 21 20)
            (17 18 22 21)
            (18 19 23 22)
            (14 15 19 18)
        );
    }
    atmosphere
    {
        type patch;
        faces
        (
            (8 20 21 9) // atmosphere
            (9 21 22 10) 
            (10 22 23 11) 
        );
    }
);

mergePatchPairs 
( 
); 

// ************************************************************************* //
